pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 9999999
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
  - name: helm-kubectl
    image: bitnami/kubectl-helm:latest
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 9999999
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: docker-credentials
          items:
            - key: .dockerconfigjson
              path: config.json
'''
        }
    }
    environment {
        IMAGE_NAME = "${values.name}"
        NAMESPACE = "${values.namespace}"
        SONAR_PROJECT_KEY = "${values.name}"
        SONAR_HOST_URL = credentials('sonarqube-host')
        SONAR_TOKEN = credentials('sonarqube-token')
    }
    stages {
        stage('Run Tests') {
            steps {
                echo 'Running tests...'
                sh 'echo tests successful'
            }
        }
        stage('Build with Kaniko') {
            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    sh '''#!/busybox/sh
                    /kaniko/executor --context `pwd` --destination eastyler/${IMAGE_NAME}:latest
                    '''
                }
            }
        }
        stage('Helm chart deployment') {
            steps {
                container('helm-kubectl') {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        sh '''
                        helm upgrade --install ${IMAGE_NAME} ./helm/generic \
                        --namespace ${NAMESPACE} \
                        --create-namespace
                        '''
                    }
                }
            }
        }
    }
}
